<<setup, include=FALSE>>=
library(knitr)
library(cowplot) # styling of plots, extension of ggplot2
library(gridExtra) # grid layouts for ggplot2
library(lattice) # needed for bwplot etc
library(english) # convert numbers to words
library(xtable) # required for print.xtable.bootabs function
opts_chunk$set(fig.path='generated_figures/')
knit_hooks$set(pdfcrop = hook_pdfcrop)

load.multipliers <- function(t) {
	colClasses <- c("factor","integer","integer","integer","factor","factor","factor","factor","numeric","numeric","integer","integer","numeric")
	csv <- read.csv(t, colClasses=colClasses)
	csv[csv$Average.Lineage.Size==0,]$Average.Lineage.Size <- NaN
	csv[is.infinite(csv$Sample.Entropy),]$Sample.Entropy <- 0
	csv$Sample.Entropy <- csv$Sample.Entropy * 1000
	csv[csv$Lineages==0,]$Lineages <- NaN
	names(csv)[names(csv)=="Datetime"] <- "Dataset"
	names(csv)[names(csv)=="Sample.Entropy"] <- "Sample Entropy"
	names(csv)[names(csv)=="Multiplier.Species"] <- "No. of Species"
	names(csv)[names(csv)=="Average.Lineage.Size"] <- "Average Lineage Size"
	levels(csv$S_Product) <- c("LeastEnergy", "Uniform")
	csv
}
@

\chapter{The Emergence of Multipliers}\label{ch:multiplication}

We now move on to the question of multiplication in \glspl{achem}. In \cref{evolution-by-natural-selection}, we saw that the ability to multiply or increase in number is fundamental to all common formulations for evolution. In \textcite{Zachar2010}, multiplication is the first of the main discriminators beyond embodiment, or the state of being, (see \cref{fig:replicators}) and so in this \namecref{ch:multiplication} we continue our investigation of evolutionary emergence in \glspl{achem} by identifying multiplying entities. 

From the earlier definition of replication (\cref{non-informational-exact-replicators}), given by the autocatalytic reaction $\Sigma x_i + A\rightarrow \Sigma y_j + \Sigma B_k$, $A$ is a multiplying entity if $A$ and some $n<k$ of the $B_k$ are equivalent under selection \parencite{Zachar2010}. 

As a secondary goal, we are also interested to learn if our assumption from \cref{ch:toyworld}, that simple measures of cycle formation in a chemistry can predict the subsequent emergence of replicators, holds at this next level of investigation.

\section{Choice of entity}

As we are concerned with reaction networks, reaction cycles---a sequence of reactions where one or more of the products of the final reaction in the cycle are of the same species as the same number of reactants for the first reaction in the cycle---are a plausible candidate for an entity formed from reactions. 

Although most works influenced by origins-of-life objectives both require and assume catalysis as the mechanism by which molecules can rapidly increase in concentration, as has been pointed out before (\cite{King1978} and recently \cite{Virgo2013}) if the goal is increased concentrations then simple stoichiometry (reaction dynamics) can also suffice. The major advantage of stoichiometry over catalysis for artificial evolution is that no additional mechanism is required other than existing reaction dynamics; catalytic systems however must somehow determine the catalytic effect of a molecule upon a particular reaction, and without a full quantum chemical model this is inherently prone to assumptions. For these reasons we shall not base our entity definition upon catalysis, but instead on the stoichiometry of sequences of reactions.

A reaction cycle is not defined by the sequence of individual molecules linked by reactions, as individual molecules are unique and transitory and so cannot form cycles, but rather by a sequence of molecular species. Molecular species define disjoint groups to which individual molecules of the same chemical composition belong: for example, the 'OH' species that includes all individual 'OH' molecules. In this way the cycle itself may be quite long-lived even though constituent molecules are produced and consumed.  

Other candidate entities are available though, such as molecular species, or interrelated groups (or sets) of reaction cycles. Why then should we choose reaction cycles instead of any of these other alternative levels of entity? The definition of multiplication (given above) is of little direct assistance: multiplying entities may be of any form.

But if we consider the context of multipliers within evolutionary systems (from \cref{evolution-by-natural-selection}), entities that evolve are multipliers that can vary under selection. This establishes a useful lower bound on the level of any candidate type of entity. For example, our entity must be capable of variation without changing its inherent nature. This is necessarily less definite for chemical elements, but it seems clear that molecules at least are not capable of variation without becoming a different type of molecule (adding a carbon atom to a molecule does not go unnoticed.)

At the other extreme, requiring multipliers to be full informational replicators is clearly overly restrictive. Holistic replicators are not informational replicators, yet no one disputes that they are multipliers. 

For our purposes, the most useful or valuable class of entity when investigating multiplication will be the simplest type that possesses the capacity for variation and selection: single reaction cycles. 

\section{Measures}

For exact multiplication, we seek reaction cycles where a cycle results in two or more cycles of the same species. Although one product cycle would be sufficient for replacement, as has been argued elsewhere (\eg \textcite{Zachar2010}), replacement alone without excess production exposes an entity to depletion from side-reactions and other forms of degradation.

For template autocatalysis (\cref{sec:real-world-chemistry}) of cycles, where the autocatalysis results from stoichiometry, the connecting molecules must also have a stoichiometry $n>1$. For exact multiplication we can derive the cycle stoichiometry ($k$) for exact multiplication by substituting $A$ for $B$ in the above autocatalytic expression to obtain $\Sigma x_i + A\rightarrow \Sigma y_j + \Sigma A_k$. Now as molecules are unique, each connecting molecule will appear once as product of one $A$ cycle and once as a reactant of one other $A$ cycle. Therefore $k=n$ and as $k>1$ for template autocatalysis, $n>1$.

What exactly is meant though by this stoichiometric relationship? When discussing non-physical replicators, such as memes, this relationship must also necessarily be non-physical and hence the general definition of replication cannot be restricted to a physical linkage between left- and right-hand sides of the relationship arrow. Our molecules and reaction cycles are simulations, not embodied in the real-world, but we can assume a simulated physical linkage between parent and offspring entities: we require that they are connected by one or more shared molecules (individual molecules, not species.)

Combining these two elements allows us to define an exact multiplier. An exact multiplier consists of:

\begin{itemize}
	\item \textit{Two or more} copies of the \textit{same reaction cycle species}, where
	\item The reaction cycle species has \textit{stoichiometry greater than one}, and
	\item Where \textit{each cycle in the multiplier is connected to at least one other multiplier cycle} by a molecule that is a product of one cycle and a reactant in the other.
\end{itemize}

The algorithm for detecting these multipliers is given in \cref{alg:discover-multipliers}. The functions $IdentifyCycles$, to detect cycles where at least one product molecule is produced in excess quantities ($n>1$ from above), and $IdentifyClusters$, for clustering cycles of the same form that are interconnected by shared molecules, are defined in \cref{alg:identify-cycles} and \cref{alg:identify-clusters} respectively.

\section{Cycle detection in a reaction network}

Choosing single reaction-cycles as entities in the hypothesis means that cycle detection is central to our analysis. The time complexity of standard cycle detection algorithms is generally a factor of the number of nodes and the number of edges. For example, Johnson's algorithm for elementary circuits has time complexity O((n+e)(c+1)) for $n$ nodes, $e$ edges and $c$ elementary circuits \parencite{Johnson1975a}. This is problematic when applied to each of our reaction graphs, where $n=100,000$, $e=200,000$, and a typical value for $c$ might be somewhere between 10,000 and 60,000 (as a molecule can be part of multiple cycles.) Furthermore, standard cycle detection algorithms require adaptation as our cycles are completed not by returning to the same node, but by visiting any node of the same species as a cycle consists of molecule species while the graph is by molecule instances and therefore (by definition) acyclic.

An algorithm to detect all cycles (where the sampling proportion is 1.0 or 100\% in \cref{alg:identify-cycles}) however is extremely expensive, and analysis of datasets containing 50,000 or more runs can take several days using this algorithm on a modern workstation. 

Detecting all cycles is not only slow, but generates very large files. Tests against some representative reaction networks results in lists of cycles that are larger than a workstation can hold in memory without swapping; this has a commensurate effect on analysis times.

The approach we take instead is to relax the requirement to identify all cycles in favour of a sampling or lower-bounds approach, suggested by an analogous strategy in \textcite[p.7]{Hordijk2015a}. We sample a proportion of all reactant molecules and search the reaction graph only for cycles incorporating one or more of the sampled molecules.

There is a significant implication to this approach. Because we are sampling ``seed'' molecules, the cycles identified will be clustered around the seed molecules in the reaction graph, while intervening sections of the reaction graph will remain unexplored; any chains of cycles may be broken at these unexplored regions. This can be mitigated, although not prevented, by careful consideration of the sample size. Additionally, as the number of cycles detected is a factor of the proportion of seed/non-seed molecules, if that proportion is constant between graphs then the relative numbers of cycles detected in each graph will also be constant (as shown in \cref{fig:samplingrange}.) This means that relative comparisons will hold true regardless of sampling proportion.

<<samplingrange, pdfcrop=TRUE, echo=FALSE, cache=TRUE, fig.pos='htp', fig.scap=NA, fig.cap='Comparison of number of cycles (left) and number of multipliers (right) for different sampling rates ($p$, in text). Note the highly linear relationship between sampling rate and number of cycles. Values are grouped by source dataset; two datasets (1489554358 and 1489565574) result in two grouped sets of data in each plot. Three replicates chosen with uniform probability for analysis.'>>=
colClasses <- c("factor","integer","integer","integer","integer", "integer","integer", "integer" , "integer")
m <- read.csv('results/cycles_and_multipliers.csv', colClasses=colClasses)

ap <- ggplot(subset(m, Environment==0 & Dataset!=1489951262), aes(x=Sample.Rate,y=Number.of.Cycles, group=Dataset)) + geom_point() + scale_y_continuous(limits = c(0, NA)) + scale_x_continuous(limits = c(0, 9)) +geom_smooth(, na.rm=TRUE) + labs(x='Sampling Rate (p)', y='Number of cycles')
bp <- ggplot(subset(m, Environment==0 & Dataset!=1489951262)) + scale_y_continuous(limits = c(0, NA)) +  scale_x_continuous(limits = c(0, 9)) + geom_smooth(aes(x=Sample.Rate, y=Multiplier.Species, group=Dataset), na.rm=TRUE) + labs(x='Sampling Rate (p)', y='Number of multiplier species')
grid.arrange(ap,bp,nrow=1,ncol=2)
@

It is worth remembering however that our primary interest in this \namecref{ch:multiplication} is simply whether multipliers exist in a reaction graph; if they exist in the cycles in a sampled reaction graph then they certainly exist in the set of all cycles. This is sufficient to justify the use of the much faster sampling algorithm in \cref{alg:identify-cycles} instead of the exhaustive alternative.

The experiments in this chapter all use a sampling proportion $p=0.2$, as a balance between performance and predictability (as very small values for $p$ produce noisy results.)


\begin{algorithm}
	\Def{DiscoverMultipliers(Reactions)}{
		MultipliersBySpecies $\leftarrow\emptyset$\;
		MolecularCycles $\leftarrow$ IdentifyCycles(Reactions)\;
		MolecularCyclesBySpecies $\leftarrow$ MolecularCycles grouped by cycle species\;
		\BlankLine
		\For{CyclesForSpecies in MolecularCyclesBySpecies}{
			MultipliersInSpecies $\leftarrow\emptyset$\;
			Clusters $\leftarrow$IdentifyClusters(CyclesForSpecies)\;
			\For{Cluster in Clusters}{
				
				AllProducts $\leftarrow \bigcup_{\forall x \in Cluster}$ Products(x)$\setminus$Reactants(x)\;
				AllReactants $\leftarrow \bigcup_{\forall x \in Cluster}$ Reactants(x)$\setminus$Products(x)\;
				LinkingMolecules $\leftarrow$AllProducts $\cap$ AllReactants\;
				
				\uIf{LinkingMolecules$\neq \emptyset$}{
					ProductCycles $\leftarrow$ \{x$\in$Cluster $\mid$ Products(x) $\cap$ LinkingMolecules $\neq \emptyset$\}\;
					ReactantCycles $\leftarrow$ \{x$\in$Cluster $\mid$ Reactants(x) $\cap$ LinkingMolecules $\neq \emptyset$\}\;
					\tcp{Check overall stoichiometry is greater than 1.0}
					\If{|ReactantCycles| > |ProductCycles|}{
						\For{Cycle in Cluster}{
							\If{(products of cycle $\cap$ LinkingMolecules $\neq \emptyset)\lor($reactants of cycle $\cap$ LinkingMolecules $\neq \emptyset$)}{
								MultipliersInSpecies $\leftarrow$ MultipliersInSpecies $\cup$ Cycle\;
							}
						}
						MultipliersBySpecies $\leftarrow$ MultipliersInSpecies\;
					}
				}
			}
		}
		\Return $MultipliersBySpecies$
	}
	\caption{\emph{DiscoverMultipliers}. Detect multiplying exact replicators within a reaction network.}\label{alg:discover-multipliers}
\end{algorithm}

\begin{algorithm}
	\Def{IdentifyCycles(Reactions)}{
		\tcp{Construct reaction graph from a list of $Reactions$}
		\For{Reaction in Reactions}{
			Add a node for the reactant side of Reaction\;
			Add a node for the product side of Reaction\;
			Add an edge from reactant node to product node\;
			\For{Reactant in Reaction}{
				Add node for Reactant and edge from Reactant to node for reactant side of Reaction\;
				Reactants $\leftarrow$ Reactants $\cup$ Reactant\;
			}
			\For{Product in Reaction}{
				Add node for Product, and edge from Product to node for product side of Reaction\;
			}
		}
		\tcp{Find all cycles for a sample of reactants in the graph}
		Cycles $\leftarrow \emptyset$\;
		Seeds $\leftarrow$ sample with uniform probability some proportion $p$ of $Reactants$\;
		\For{Seed in Seeds}{
			ShortestPaths $\leftarrow$ FindCyclesFromNode(Seed)\;
			\For{Path in ShortestPaths}{
				\uIf{the stoichiometry for Seed in the cycle given by this Path$\geq 2$}{
					Cycles $\leftarrow$ Cycles $\cup$ Path\;
				} 
			}
		}
		\Return Cycles\;
	}
	\caption[\emph{IdentifyCycles}. Sampling algorithm to identify autocatalytic cycles within a reaction network.]{\emph{IdentifyCycles}. Sampling algorithm to identify autocatalytic cycles of molecules within a reaction network. A cycle is a sequence of reactions where at least one product molecule in the final reaction is of the same species as a reactant molecule in the first reaction of the cycle. The cycle is considered autocatalytic for a given product molecule if the stoichiometry for the molecule is greater than one, or in other words, if the cycle produces more of the product than is consumed. The sampling proportion $p$ determines the proportion of the total set of reactants to be used as seeds when searching for cycles.}\label{alg:identify-cycles}
\end{algorithm}


\begin{algorithm}
	\Def{FindCyclesFromNode(Source)}{
		$Target \leftarrow$ species of $Source$\;
		$Stack \leftarrow$ [($Source$, [$Source$])]\;
		\While{Stack}{
			$(Vertex, Path) \leftarrow Stack.pop()$\;
			\For{$NextNode$ in predecessors(vertex)$\setminus$path}{
				\If{$NextNode$ is a molecule $\land$ species of $NextNode$ = $Target$}{
					Yield reversed($Path$ + [$NextNode$])\;
				}
				\Else{
					\If{|$Path$| < $MAXDEPTH$}{
						$Stack$.append(($NextNode$, $Path + [NextNode]$))
					}
				}
			}
		}
	}
	\caption[\emph{FindCyclesFromNode}. Recusive algorithm to identify cycles from a seed molecule.]{\emph{FindCyclesFromNode}. Recursive breadth-first algorithm to identify all shortest paths (and hence cycles) from $Source$ to any predecessor molecule of the same molecular species as $Source$ in the directed reaction graph.$MAXDEPTH$ is a constant to bound the cost of finding cycles.}\label{alg:find-cycles-from-seed}
\end{algorithm}


\begin{algorithm}
	\Def{IdentifyClusters(MolecularCyclesForSpecies)}{
		Clusters $\leftarrow\emptyset$\;
		Unclustereds $\leftarrow\emptyset$\;
		
		\For{CycleMolecules in MolecularCyclesForSpecies}{
			
			CanCluster $\leftarrow$False\;
			
			\tcp{First check if part of any existing cluster}
			\For{Cluster in Clusters}{
				\uIf{Cluster $\cap$ CycleMolecules}{
					Cluster $\leftarrow$Cluster $\cup$ CycleMolecules\;
					CanCluster $\leftarrow$True\;
					break
				}
			}
			
			\tcp{Otherwise see if can form a new cluster with a previously unclustered cycle}
			\uIf{$\neg$CanCluster}{
				\For{Unclustered in Unclustereds}{
					\uIf{Unclustered $\cap$ CycleMolecules}{
						Clusters $\leftarrow$Clusters $\cup$ new cluster of [Unclustered $\cup$ Cycle]\;
						Unclustereds $\leftarrow$Unclustereds$\setminus$Unclustered\;
						CanCluster $\leftarrow$True\;
					}
				}
			}
			\tcp{If still can't cluster, then add to Unclustereds}
			\uIf{$\neg$CanCluster}{
				Unclustereds $\leftarrow$Unclustereds $\cup$ Cycle\;
			}
		}
		
		\Return Clusters
	}
	\caption[\emph{IdentifyClusters}. Identification of clusters: reaction cycles of the same form interconnected by shared molecules.]{\emph{IdentifyClusters}. Identification of clusters: reaction cycles of the same form interconnected by shared molecules where each such molecule is produced in one cycle in the cluster, and consumed in another. The parameter \emph{MolecularCyclesForSpecies} contains all cycles of the same cycle species, that is, all cycles that consist of the same sequence of reactions when written in SMILES (species) form.}\label{alg:identify-clusters}
\end{algorithm}

\section{Experiment design}

We can now state the working hypothesis of this chapter as:

\begin{hypothesis}
	Exact multipliers, in the form of entities composed of a repeated reaction cycle, can emerge in an \gls{achem}.
\end{hypothesis}

Multipliers are structures that, in our context of \glspl{achem}, emerge from the reactions in a reaction network; given the nature of emergence, to determine if an \gls{achem} can result in multipliers, we turn to experiment. The hypothesis test is as follows:

\begin{itemize}[label={}]
	\item H$_0$:  No multiplying single reaction-cycle entities exist in any reaction network generated by an \gls{achem}.
	\item H$_1$:  Multiplying single reaction-cycle entities exist in an \gls{achem} reaction network.
\end{itemize}

We again use the ToyWorld parameterized evolutionary model introduced in \cref{ch:toyworld}. The experiments follow a full factorial design although with only a single factor ($S_\mathrm{Product}$) at two levels(Uniform and LeastEnergy),  while $S_\mathrm{Reactant}$ is set to Kinetic (\cref{alg:kinetic-selection}). The experiments run in a randomised order, with two (2) replicates of each combination of factors executed in sequence before beginning the next combination. The factors and levels used are given in \cref{tbl:multiplication-factors}.

\begin{table}
	\scriptsize
	\begin{center}
		\caption{Factors, or independent variables, for experiments in \cref{ch:multiplication}.}\label{tbl:multiplication-factors}
		\begin{tabular}{p{1.4cm}p{3cm}p{3cm}p{5.5cm}}
			\toprule
			Factor                &-1 value	&+1 value			&Description                                                    \\
			\midrule
			\noalign{\smallskip}
			$S_\mathrm{Product}$  &Uniform		&LeastEnergy    &See \cref{product-selection-strategies}                \\
			\noalign{\smallskip}
			\bottomrule
		\end{tabular}
	\end{center}
\end{table}

Each replicate runs for 100,000 generations. The initial population for each replicate contains 10$\times$[H][H] molecules, 10$\times$FO, 20$\times$O, 10$\times$[O-][N+](=O)[N+]([O-])=O, 10$\times$N(=O)[O], and 20$\times$O=C=O (all in SMILES notation), and the initial reactor kinetic energy is set to 100 units.

\section{Results and discussion}

<<toyworld2-multiplier-results020, fig.pos='ht', results='asis', echo=FALSE, cache=TRUE, warning=FALSE>>=
csv2 <- load.multipliers('results/multipliers-020.csv')
csv1 <- load.multipliers('results/multipliers-005.csv')
csv <- merge(csv1,csv2, by=1:10)
names(csv)[names(csv)=="No. of Species.x"] <- "No. of Species (p=0.05)"
names(csv)[names(csv)=="Average Lineage Size.x"] <- "Average Lineage Size (p=0.05)"
names(csv)[names(csv)=="Lineages.x"] <- "Lineages (p=0.05)"
names(csv)[names(csv)=="No. of Species.y"] <- "No. of Species (p=0.2)"
names(csv)[names(csv)=="Average Lineage Size.y"] <- "Average Lineage Size (p=0.2)"
names(csv)[names(csv)=="Lineages.y"] <- "Lineages (p=0.2)"

drop <- c('S_Reactant', 'Target', 'Shape', 'Sample Entropy', 'DFA')

library(xtable)

print(xtable(csv[csv$Environment==0 & csv$Dataset!=1489951262,!names(csv) %in% drop], sanitize.text.function=function(x){x}, caption='Summary results for numbers of multipliers measured by \\cref{alg:discover-multipliers} in reaction networks generated by LeastEnergy and Uniform $S_\\mathrm{Product}$ strategies, under stable environments (no external selective pressure). Sampling proportion $p$ in \\cref{alg:identify-cycles} shown in column labels.', label='tbl:toyworld2-multiplier-results', digits=c(0,0,0,0,0,0,0,0,2,0,0,2)), booktabs=TRUE, include.rownames=FALSE, rotate.colnames=TRUE, size="scriptsize", caption.placement="top")
@

Identification of cycles within the reaction network (our hypothesised reaction-cycle entities) is by \cref{alg:identify-cycles}, with a sampling proportion $p=0.20$ ($p=0.05$ also shown for comparison), and \cref{alg:discover-multipliers} applied to identify any multipliers within those cycles.

From \cref{tbl:toyworld2-multiplier-results} we can see that exact multipliers arise in approximately half of the experiment runs. Most of those runs produced only one type (species) of multiplier; the remaining runs with multipliers produced two types. Each type existed only once in a run (lineages), and the number of cycles in each lineage was again quite low: 3 cycles only. One of the resulting multipliers is shown in \cref{fig:example-multiplier}, constructed from three instances of the same cycle species ('Y', see \cref{tbl:replicator-species} for other species descriptions.)

Exact multipliers do occur, but infrequently, and they are not long-lived.

\begin{figure}[ht]
	\begin{center}
		\vspace{10pt}
		\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,font=\sffamily\scriptsize]
		\node (s0) at (0,6) {[H+]};
		\node (s1) at (0,5) {[H][O]+[H+]$\rightarrow$[H+]+[O-]+[H+]};
		\node (s2) at (0,4) {[O-]};
		\node (s3) at (0,3) {[H+]+[O-]$\rightarrow$[H][O]};
		\node (s4) at (0,2) {[H][O]};
		\node (s5) at (0,1) {[H+]+[H][O]$\rightarrow$[H+]+[H+]+[O-]};
		\node (s6) at (0,0) {[H+]};
		\draw [->] (s0) -- (s1);
		\draw [->] (s1) -- (s2);
		\draw [->] (s2) -- (s3);
		\draw [->] (s3) -- (s4);
		\draw [->] (s4) -- (s5);
		\draw [->] (s5) -- (s6);
		
		\node (s10) at (5,6) {[H+]};
		\node (s11) at (5,5) {[H][O]+[H+]$\rightarrow$[H+]+[O-]+[H+]};
		\node (s12) at (5,4) {[O-]};
		\node (s13) at (5,3) {[H+]+[O-]$\rightarrow$[H][O]};
		\node (s14) at (5,2) {[H][O]};
		\node (s15) at (5,1) {[H+]+[H][O]$\rightarrow$[H+]+[H+]+[O-]};
		\node (s16) at (5,0) {[H+]};
		\draw [->] (s10) -- (s11);
		\draw [->] (s11) -- (s12);
		\draw [->] (s12) -- (s13);
		\draw [->] (s13) -- (s14);
		\draw [->] (s14) -- (s15);
		\draw [->] (s15) -- (s16);
		
		\node (s20) at (10,6) {[H+]};
		\node (s21) at (10,5) {[H][O]+[H+]$\rightarrow$[H+]+[O-]+[H+]};
		\node (s22) at (10,4) {[O-]};
		\node (s23) at (10,3) {[H+]+[O-]$\rightarrow$[H][O]};
		\node (s24) at (10,2) {[H][O]};
		\node (s25) at (10,1) {[H+]+[H][O]$\rightarrow$[H+]+[H+]+[O-]};
		\node (s26) at (10,0) {[H+]};
		\draw [->] (s20) -- (s21);
		\draw [->] (s21) -- (s22);
		\draw [->] (s22) -- (s23);
		\draw [->] (s23) -- (s24);
		\draw [->] (s24) -- (s25);
		\draw [->] (s25) -- (s26);
		
		\draw [->] (s6) -- (2.5,0) -- (2.5,7) -- (5,7) -- (s10);
		\draw [->] (s16) -- (7.5,0) -- (7.5,7) -- (10,7) -- (s20);
		
		\draw [-] (-2.25,-0.5) -- (-2.25,-1) -- (2.25,-1) -- (2.25,-0.5);
		\node at (0,-1.5) {Reaction Cycle (Species 'Y')};
		\draw [-] (2.75,-0.5) -- (2.75,-1) -- (7.25,-1) -- (7.25,-0.5);
		\node at (5,-1.5) {Reaction Cycle (Species 'Y')};
		\draw [-] (7.75,-0.5) -- (7.75,-1) -- (12.25,-1) -- (12.25,-0.5);
		\node at (10,-1.5) {Reaction Cycle (Species 'Y')};
		
		\draw [-] (-2.5,-2.5) -- (-2.5,-3) -- (12.5,-3) -- (12.5,-2.5);
		\node at (5,-3.5) {Multiplying Replicator (Species 'YYY')};
		\end{tikzpicture}
		\caption{Example multiplier from experimental results (of type or species 'YYY', see \cref{tbl:replicator-species}). A multiplier is formed from two or more of the same species of reaction cycle, connected by shared molecules. For clarity, the only molecules shown are those that form part of the multiplier cycle (all others can be easily discovered from the reaction equations.)}
		\label{fig:example-multiplier}
	\end{center}
\end{figure}

\subsection{Do multipliers arise simply by chance?}\label{sec:multipliers-by-chance}

Perhaps multiplier emergence is simply a product of chance, and that given enough generations, probabilities will favour two or more of the cycles that form being linked by molecules in a way that meets our definition of a multiplier. In this view, multipliers are inevitable in an \gls{achem} because the definition is not sufficiently stringent to exclude chance events.

This alternative explanation is not incompatible with our results. The average lineage size---the number of cycles in each instance of a multiplier---is quite low at 3 cycles per lineage. That would suggest that the multipliers are not particularly stable; that they form, and then after a short period, dissipate. 

This can be tested by comparing the number of replicators in these experiments with those generated by a control experiment with a neutral bias. 

The control uses the Uniform $S_\mathrm{Product}$ and $S_\mathrm{Reactant}$ strategies to chose reaction products and reactants (respectively) with uniform probability, and hence any multipliers will be those that result from chance alone. The statistical hypothesis is as follows:

\begin{itemize}[label={}]
	\item H$_0$: $x_i=x_j \forall i,j$, where $x$ indicates the presence of multipliers: $x_i=|{multipliers}_i|>0$.
	\item H$_1$: $x_i\neq x_j$ for some $i,j$.
\end{itemize}

<<toyworld2-multiplier-control, fig.pos='ht', results='asis', echo=FALSE, cache=TRUE, warning=FALSE>>=
csv <- load.multipliers('results/multipliers-020.csv')

drop <- c('S_Reactant', 'Target', 'Shape', 'Sample Entropy', 'DFA')

print(xtable(csv[csv$Environment==0 & csv$Dataset==1489951262,!names(csv) %in% drop], caption='Numbers of multipliers from 10 replicates of control experiment. Multipliers identified by \\cref{alg:discover-multipliers}, in reaction networks generated by Uniform $S_\\mathrm{Reactant}$ and $S_\\mathrm{Product}$ strategies, under stable environments (no external selective pressure). Sampling proportion $p$ in \\cref{alg:identify-cycles} set to 0.2.', label='tbl:toyworld2-multiplier-control', digits=c(0,0,0,0,0,0,0,0,2)), booktabs=TRUE, rotate.colnames=TRUE, include.rownames=FALSE, size="scriptsize", caption.placement="top")
@

<<test-multipliers ,echo=FALSE>>=
csv <- load.multipliers('results/multipliers-020.csv')

a <- with(csv, anova(lm(`No. of Species`>0 ~ S_Product=="Uniform" & S_Reactant=="UniformReactantSelection")))

b <- t.test(csv[csv$S_Product!="Uniform" || csv$S_Reactant!="UniformReactantSelection",]$`No. of Species`>0, csv[csv$S_Product=="Uniform" & csv$S_Reactant=="UniformReactantSelection",]$`No. of Species`>0)

#library(xtable)
#print(xtable(a, caption='ANOVA analysis.', label='tbl:anova-multipliers'), booktabs=TRUE, include.rownames=TRUE, size="scriptsize", caption.placement="top")
@

The results are shown in \cref{tbl:toyworld2-multiplier-control}; no replicate of the control experiments generated multipliers. Testing the statistical hypothesis with a two-sample, two-tailed, Student's t-test gives a t-statistic of $\Sexpr{b$statistic[1]}$ with $p=\Sexpr{b$p.value[1]}$, and so we reject H$_0$ (multipliers result from chance alone) in favour of the original hypothesis, that multipliers emerge from biases in the \gls{achem}. Although the sampling proportion $p$ undoubtably affects the total number of multipliers identified in each experiment, the relative numbers between experiments are maintained and hence we do not believe that this result is solely an artifact of sampling.

\subsection{Is the number of reaction cycles a good predictor for the number of multipliers?}

Returning to the underlying assumption of \cref{ch:toyworld}, is there a relationship between the number of cycles and the number of exact multipliers? If there is, then the parameters for an \gls{achem} designed to investigate replicators (of which exact multipliers are the simplest form) could be established based simply on a count of cycles calculated from some calibration runs. If not, then cycle counts cannot be used as a guide for parameter choices, and in the absence of any other predictor, all parameter combinations must be considered in any replicator experiment.

The test hypothesis is as follows:

\begin{itemize}[label={}]
	\item H$_0$: $|Multipliers|\appropto |Cycles|$ for all parameter combinations.
	\item H$_1$: $|Multipliers|$ cannot be predicted from $|Cycles|$.
\end{itemize}

<<cycles-to-multipliers, pdfcrop=TRUE, echo=FALSE, cache=TRUE, fig.pos='htp', fig.scap=NA, fig.cap='Relationship between the number of cycles and the number of multipliers for a sample of replicates from datasets 1489554358, 1489565574 and 1489951262, including linear regression line and 95\\% confidence region.'>>=
colClasses <- c("factor","integer","integer","integer","integer", "integer","integer", "integer" , "integer")
m <- read.csv('results/cycles_and_multipliers.csv', colClasses=colClasses)

ggplot(m,aes(Number.of.Cycles, Multiplier.Species)) + geom_point(shape=1) +  geom_smooth(method=lm) + labs(x='Number of cycles', y='Number of multiplier species')
@

A scatterplot of the relationship (\cref{fig:cycles-to-multipliers}) shows only a weak relationship between cycles and multipliers. The association between the two variables is positive, and the form appears to be essentially linear. However, the correspondence with the simple linear regression is poor, and the predictive value of cycles appears weak.

We examine this further by testing the predictive value of the relationship for two specific datasets. 

From the previous \namecref{sec:multipliers-by-chance} we have the example of a dataset (1489951262) in which the number of multipliers is zero in all runs, and the number of cycles is non-zero (\Sexpr{mean(subset(m, Dataset==1489951262)$Number.of.Cycles)}.) However, in another dataset (1489554358) both the number of multipliers (\Sexpr{mean(subset(m, Dataset==1489554358)$Multiplier.Species)}) and the number of cycles (\Sexpr{mean(subset(m, Dataset==1489554358)$Number.of.Cycles)}) are non-zero.

We reject H$_0$ as the relationship between cycles and multipliers in these two datasets is complex, and conclude that the number of multipliers cannot easily be predicted from the number of cycles. Our original supposition, that we could use a simple count of cycles to select the parameters, and parameter values, for an \gls{achem} to investigate replication is not supported by these results.

\section{Conclusions}

We began this \namecref{ch:multiplication} with an examination of the most appropriate form of entity for an examination into multiplication in \glspl{achem}. The same reaction network contains a variety of candidate entities arranged in a compositional hierarchy. At the base level of the \gls{achem} are atoms, formed by reactions into molecules. Reactions and molecules can be grouped into various other forms: reaction cycles, where the products of the final reaction in the cycle go on to become reactants in the first reaction of the next iteration of the cycle, and the various forms of reaction sets, such as the autocatalytic sets introduced earlier in this work. And of course groups of reactions and molecules can likely form higher level entities in turn. We selected reaction cycles as the appropriate entity form as the simplest of the candidate forms capable of both variation and selection.

Next we considered the definition of exact multiplication, and concluded that an exact multiplier consisting of reaction cycles must meet three conditions:

\begin{enumerate}
	\item The multiplier must consist of two or more copies of the same reaction cycle species.
	\item The reaction cycle species must have stoichiometry greater than one.
	\item Each cycle in the multiplier must be connected to at least one other multiplier cycle by a molecule that is a product of one cycle and a reactant in the other.
\end{enumerate}

However, to identify multipliers using this definition we must first identify reaction cycles in the reaction graph and exhaustive enumeration of these cycles is impractical. Instead we introduced a sampling algorithm that discovers cycles by searching from a subset of ``seed'' molecules, chosen with uniform probability from the full set of reactant and product molecules in the reaction graph. The sampling algorithm discovers cycle numbers in rough proportion to the sampling proportion $p$, and we showed that this is sufficient for multiplier discovery.

Finally, we tested the hypothesis that multipliers of the form described can arise in an \gls{achem} by experiment using the ToyWorld \gls{achem} from \cref{ch:toyworld}. In summary, exact multipliers do arise in the ToyWorld \gls{achem}, but not in any great numbers, and when they do, they do not persist for long. We have shown though that they do occur as the result of a non-neutral combination of Product and Reactant selection strategies, and not purely by chance. It is also apparent that our earlier supposition, that the number of reaction cycles would be a good proxy or predictor for multiplier or replicator activity, is not supported by the evidence.