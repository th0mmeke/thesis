<<setup, include=FALSE>>=
library(knitr)
library(cowplot) # styling of plots, extension of ggplot2
library(gridExtra) # grid layouts for ggplot2
library(lattice) # needed for bwplot etc
library(english) # convert numbers to words
library(xtable) # required for print.xtable.bootabs function
opts_chunk$set(fig.path='generated_figures/')
knit_hooks$set(pdfcrop = hook_pdfcrop)
@

\chapter{The Emergence of Multipliers}\label{ch:multiplication}

We now move on to the question of multiplication in \glspl{achem}. In \cref{evolution-by-natural-selection}, we saw that the ability to multiply or increase in number is fundamental to all common formulations for evolution. Without the ability to copy oneself there can be no intergenerational change, and more fundamentally, no ongoing mechanism for selection between entities. In \citeauthor{Zachar2010}, multiplication is the first of the main discriminators beyond embodiment, or the state of being, (see \cref{fig:replicator-classification}) and so in this \namecref{ch:multiplication} we begin to investigate evolutionary emergence in \glspl{achem} by looking for muliplying entities. As a secondary goal, we are also interested to learn if our underlying hypothesis from \cref{toyworld}, that simple measures of cycle formation in a chemistry can predict the subsequent emergence of replicators, holds at this next level of investigation.

From the earlier definition of exact replication \cref{non-informational-exact-replicators}, given by the autocatalytic reaction $\Sigma x_i + A\rightarrow \Sigma y_j + \Sigma B_k$, we look for entities $A$ and $B_k$, where $A$ and $B_k$ are ``equivalent''. Strictly speaking, equivalent in this context means equivalent under selection \parencite{Zachar2010}, however at this stage we are yet to demonstrate selection and hence we adopt a more restricted sense of multiplication where the forms must be identical rather than equivalent. 

As we are concerned with reaction networks, a reasonable candidate for an emergent entity from reactions would be reaction cycles; this is justifiable as cycles are potentially long-lived even though constituent molecules are produced and consumed. A reaction cycle is not defined by the sequence of individual molecules linked by reactions, as individual molecules are unique and transitory and so cannot form cycles, but rather by a sequence of molecular species. Molecular species define disjoint groups to which individual molecules of the same chemical composition belong: for example, the class of all 'OH' molecules, not one individual molecule. By extension, the \textit{form} of a reaction cycle can also be considered the \textit{species} of the reaction cycle, and we shall use species to mean the form of the reaction cycle from here onwards.

We could have instead chosen to investigate entities of quite different forms within the bounds of the same \gls{achem}, such as molecular species; interrelated groups or sets of reaction cycles; or even full information replicators. Why do we choose reaction cycles instead of entities at any of these other levels of complexity? Our goal is to identify multiplying entities; however the definition of multiplication (given above) is of little direct assistance. Multiplying entities are entities which multiply. Help though comes from the context of multipliers within evolutionary systems: as we have seen in \cref{evolution-by-natural-selection}, entities that evolve are multipliers that can vary, under selection. This establishes a useful lower bound on the level of any candidate type of entity. For example, our entity must be capable of variation without cfhanging its inherent nature. This is somewhat indeterminate when considering chemical elements, but it seems clear that molecules at least are not capable of variation without becoming a different type of molecule (adding a carbon atom to a molecule does not go unnoticed.)

At the other extreme, requiring multipliers to be full informational replicators is clearly overly restrictive. Holistic replicators are not informational replicators, yet no one disputes that they are multipliers. For our purposes, the most useful or valuable definition therefore of an entity when investigating multiplication therefore is the simplest or lowest level entity that posses the capacity for variation and selection. This is somewhat circular, as we hope to establish variation and selection in reference to multipliers, but can serve, as mentioned, as a sanity check when evaluating candidates. Molecules are too low while single cycles are not obviously ruled out; therefore we concentrate on single cycles for now.

\section{Measures}

For exact multiplication, we seek reaction cycles of the same species where one cycle results ($\rightarrow$) in two or more cycles of the same species. Although one product cycle would be sufficient for replacement, as has been argued elsewhere (\eg \textcite{Zachar2010}), simple replacement exposes an entity to depletion from side-reactions and other forms of degradation. Although we have established that our entities are cycles, not molecules, for template autocatalysis (\cref{sec:real-world-chemistry}) of cycles, where the autocatalysis results from stoichiometry, it can be shown that the connecting molecules must also have a stoichiometry $n>1$. For exact multiplication we can derive the cycle stoichiometry ($k$) for exact multiplication by substituting $A$ for $B$ in the above autocatalytic expression to obtain $\Sigma x_i + A\rightarrow \Sigma y_j + \Sigma A_k$. Now as molecules are unique, each connecting molecule will appear once as product of one $A$ cycle and once as a reactant of one other $A$ cycle. Therefore $k=n$ and as $k>1$ for template autocatalysis, $n>1$.

What exactly is meant though by the $\rightarrow$ relationship? When discussing non-physical replicators, such as memes, this relationship must also necessarily be non-physical and hence the general definition of replication cannot be restricted to a physical linkage between left- and right-hand sides of the relationship arrow. Our molecules and reaction cycles are simulations, not embodied in the real-world, but we can assume a simulated physical linkage over the relationship arrow: we require that the entities on left- and right-hand sides are connected by one or more shared molecules (individual molecules, not species.) 

The algorithm for detecting these multipliers is given in \cref{alg:discover-multipliers}. The functions $IdentifyCycles$, to detect cycles where at least one product molecule is produced in excess quantities ($n>1$ from above), and $IdentifyClusters$, for clustering cycles of the same form that are interconnected by shared molecules, are defined in \cref{alg:identify-cycles-sampling} and \cref{alg:identify-clusters} respectively.

Cycle detection forms the basis for all further analysis, including the identification of autocatalytic cycles, and hence multiplication and variability. An algorithm to detect all cycles (where the sampling proportion is 1.0 or 100\% in \cref{alg:identify-cycles-sampling}) however is extremely expensive, and analysis of datasets containing 50,000 or more runs can take several days using this algorithm on a modern workstation. The cost stems from the initial shortest-path cycle detection which is called once for every molecule of every reactant species in the dataset, without consideration for previously identified cycles.

The time complexity of standard cycle detection algorithms is generally a factor of the number of nodes and the number of edges. For example, Johnson's algorithm for elementary circuits has time complexity O((n+e)(c+1)) for n nodes, e edges and c elementary circuits. This is problematic when applied to each of our reaction graphs, where n=100000, e=200000, and a typical value for c might be somewhere between 10000 and 60000, as a molecule can be part of multiple cycles. Furthermore, standard cycle detection algorithms require adaptation as our cycles are closed not by returning to the same node, but by visiting any node of the same species as previously visited as a cycle consists of molecule species while the graph is by molecule instances and therefore by definition acyclic. 

The approach we take instead is to relax the requirement to identify all cycles in favour of a sampling or lower-bounds approach, similar to that in \textcite[p.7]{Hordijk2015a}. We sample a proportion (currently 10\%) of all reactant molecules and search the reaction graph only for cycles incorporating one or more of the sampled molecules. This procedure (documented in \cref{alg:identify-cycles-sampling}) is quite robust as shown by the variance of the number of cycles identified by repeating the procedure a number of times, each time with a new choice of sample molecules. 

There is a significant limitation to this approach however. Because we are sampling ``seed'' molecules, the cycles identified will be clustered around the seed molecules in the reaction graph, while intervening sections of the reaction graph will remain unexplored; any chains of cycles may be broken at these unexplored regions. This can be mitigated, although not prevented, by consideration of the sample size. Additionally, as the number of cycles detected is a factor of the proportion of seed/non-seed molecules, if that proportion is constant between graphs then the relative numbers of cycles detected in each graph should also be maintained.

Remember that our primary interest is in whether multipliers exist in a reaction graph; if they exist in the cycles in a sampled reaction graph then they certainly exist in the set of all cycles. This is sufficient to justify the use of the much faster sampling algorithm in \cref{alg:identify-cycles-sampling} instead of the exhaustive alternative.


\begin{algorithm}
	\Def{DiscoverMultipliers(Reactions)}{
		Multipliers $\leftarrow\emptyset$\;
		MolecularCycles $\leftarrow$ IdentifyCycles(Reactions)\;
		MolecularCyclesBySpecies $\leftarrow$ MolecularCycles grouped by cycle species\;
		\For{CyclesForSpecies in MolecularCyclesBySpecies}{
			Clusters $\leftarrow$IdentifyClusters(CyclesForSpecies)\;
			\For{Cluster in Clusters}{
				Products $\leftarrow$\{all products generated by cycles in Cluster\}\;
				Reactants $\leftarrow$\{all reactants for every cycle in Cluster\}\;
				Linkages $\leftarrow$Products $\cap$ Reactants\;
				\uIf{Linkages}{
					ProductLinkageMoleculesByCycle $\leftarrow$\{products for cycle $\cap$ Reactants for every cycle in cluster\}\;
					\For{LinkageMoleculesInCycle in ProductLinkageMoleculesByCycle}{
						ReactantLinkages $\leftarrow$\{reactants for cycle $\cap$ LinkageMoleculesInCycle for every cycle in cluster\}\;
						NumberDownstreamCycles $\leftarrow$count of items in ReactantLinkages with a value greater than zero\;
						
						\uIf{NumberDownstreamCycles > 1}{ 
							Multipliers $\leftarrow$Multipliers $\cup$ ReactantLinkages\;
						}
					}
				}
			}
		}
		\Return $Multipliers$
	}
	\caption[\emph{DiscoverMultipliers}. Detect multiplying replicators within a reaction network.]{\emph{DiscoverMultipliers}. Detect multiplying replicators within a reaction network.}\label{alg:discover-multipliers}
\end{algorithm}


\begin{algorithm}
	\Def{IdentifyCycles(Reactions)}{
		\tcp{Construct reaction graph from a list of $Reactions$}
		\For{each $Reaction$ in $Reactions$}{
			Add a node for the reactant side of Reaction\;
			Add a node for the product side of Reaction\;
			Add an edge from reactant node to product node\;
			\For{each $Reactant$ in $Reaction$}{
				Add node for $Reactant$, and edge from $Reactant$ to node for reactant side of Reaction\;
				$Reactants \leftarrow Reactants \cup Reactant$\;
			}
			\For{each $Product$ in $Reaction$}{
				Add node for $Product$, and edge from $Product$ to node for product side of Reaction\;
			}
		}
		\tcp{Find all cycles for a sample of reactants in the graph}
		$Seeds \leftarrow$ sample with uniform probability some proportion $P$ of $Reactants$\;
		\For{each $Seed$ in $Seeds$}{
			$ShortestPaths \leftarrow$ FindCyclesFromSeed($Seed$)\;
			\For{each $Path$ in $ShortestPaths$}{
				\uIf{the stoichiometry for $Seed$ in the cycle given by this $Path\geq 2$}{
					Add $Path$ to the list of cycles\;
				} 
			}
		}
		\Return list of cycles\;
	}
	\caption[\emph{IdentifyCyclesSampling}. Sampling algorithm to identify autocatalytic cycles within a reaction network.]{\emph{IdentifyCyclesSampling}. Sampling algorithm to identify autocatalytic cycles of molecules within a reaction network. A cycle is a sequence of reactions where at least one product molecule in the final reaction is of the same species as a reactant molecule in the first reaction of the cycle. The cycle is considered autocatalytic for a given product molecule if the stoichiometry for the molecule is greater than one, or in other words, if the cycle produces more of the product than is consumed.}\label{alg:identify-cycles-sampling}
\end{algorithm}


\begin{algorithm}
	\Def{FindCyclesFromSeed(Source)}{
		$Target \leftarrow$ species of $Source$\;
		$Stack \leftarrow$ [($Source$, [$Source$])]\;
		\While{Stack}{
			$(Vertex, Path) \leftarrow Stack.pop()$\;
			\For{$NextNode$ in predecessors(vertex) - path}{
				\If{$NextNode$ is a molecule and species of $NextNode$ = $Target$}{
					Yield reversed($Path$ + [$NextNode$])\;
				}
				\Else{
					\If{|$Path$| < $MAXDEPTH$}{
						$Stack$.append(($NextNode$, $Path + [NextNode]$))
					}
				}
			}
		}
	}
	\caption[\emph{FindCyclesFromSeed}. Recusive algorithm to identify cycles from a seed molecule.]{\emph{FindCyclesFromSeed}. Recursive breadth-first algorithm to identify all shortest paths (and hence cycles) from $Source$ to any predecessor molecule of the same molecular species as $Source$ in the directed reaction graph.$MAXDEPTH$ is a constant to bound the cost of finding cycles.}\label{alg:find-cycles-from-seed}
\end{algorithm}


\begin{algorithm}
	\Def{IdentifyClusters(MolecularCyclesForSpecies)}{
		Clusters $\leftarrow\emptyset$\;
		Unclustereds $\leftarrow\emptyset$\;
		
		\For{CycleMolecules in MolecularCyclesForSpecies}{
			
			CanCluster $\leftarrow$False\;
			
			\tcp{First check if part of any existing cluster}
			\For{Cluster in Clusters}{
				\uIf{Cluster $\cap$ CycleMolecules}{
					Cluster $\leftarrow$Cluster $\cup$ CycleMolecules\;
					CanCluster $\leftarrow$True\;
					break
				}
			}
			
			\tcp{Otherwise see if can form a new cluster with a previously unclustered cycle}
			\uIf{$\neg$CanCluster}{
				\For{Unclustered in Unclustereds}{
					\uIf{Unclustered $\cap$ CycleMolecules}{
						Clusters $\leftarrow$Clusters + new cluster of [Unclustered $\cup$ Cycle]\;
						Unclustereds $\leftarrow$Unclustereds-Unclustered\;
						CanCluster $\leftarrow$True\;
					}
				}
			}
			\tcp{If still can't cluster, then add to Unclustereds}
			\uIf{$\neg$CanCluster}{
				Unclustereds $\leftarrow$Unclustereds $\cup$ Cycle\;
			}
		}
		
		\Return Clusters
	}
	\caption[\emph{IdentifyClusters}. Identification of clusters: reaction cycles of the same form interconnected by shared molecules.]{\emph{IdentifyClusters}. Identification of clusters: reaction cycles of the same form interconnected by shared molecules where each such molecule is produced in one cycle in the cluster, and consumed in another. The parameter \emph{MolecularCyclesForSpecies} contains all cycles of the same cycle species, that is, all cycles that consist of the same sequence of reactions when written in SMILES (species) form.}\label{alg:identify-clusters}
\end{algorithm}



\begin{algorithm}
	
%	for cycle in cycles:
%	if type(cycle) == dict:
%	grouped_cycles[len(cycle['cycle'])].append(cycle['cycle'])
%	else:
%	grouped_cycles[len(cycle)].append(cycle)
%	
%	stable_cycles = defaultdict(list)
%	cycle_form = {}
%	
%	for cycles_of_length in grouped_cycles.itervalues():
%	# cycles_of_length has all cycles of same length, but not guaranteed to be of same type
%	smiles_cycles = defaultdict(list)
%	for cycle in cycles_of_length:
%	s = map_id_to_smiles(cycle, smiles)
%	smiles_cycles[frozenset(s)].append(get_molecules_in_cycle(cycle))
%	
%	cycle_form[frozenset(s)] = s
%	
%	# smiles_cycles now contains lists of all identical cycles types, so just have to match up the connected ones
%	
%	for cycle_type, cycles_of_type in smiles_cycles.iteritems():
%	# cycle_type is the smiles form, cycles_of_type every unique cycle with molecule ids
%	clusters = [cycles_of_type.pop()]
%	counts = defaultdict(int)
%	for cycle_molecules in cycles_of_type:
%	for i in range(0, len(clusters)):
%	if clusters[i].intersection(cycle_molecules):
%	clusters[i].union(cycle_molecules)
%	counts[i] += 1
%	break
%	if len(counts) > 0 and max(counts.values()) > 1:
%	stable_cycles[max(counts.values())].append(cycle_form[cycle_type])  # Longest stable duration > 1
%	
%	return stable_cycles, [x[0] for x in cycle_form.itervalues()]
		
%	\caption{\emph{IdentifyMultipliers}. Algorithm to identify all multipliers within a reaction network.}\label{alg:discover-multipliers}
	
\end{algorithm}


\section{Approach}

The foodset contains 10$\times$[H][H] molecules, 10$\times$FO, 20$\times$O, 10$\times$[O-][N+](=O)[N+]([O-])=O, 10$\times$N(=O)[O], and 20$\times$O=C=O. Each \gls{replicate} of the experiment was for 100,000 generations.

\section{Discussion}

<<toyworld2-replicator-results, fig.pos='ht', results='asis', echo=FALSE, cache=TRUE, warning=FALSE>>=
colClasses <- c("factor","integer","integer","integer","factor","factor","factor","factor","numeric","numeric","integer","integer","numeric")
csv_multipliers <- read.csv('results/multipliers.csv', colClasses=colClasses)
csv_multipliers[csv_multipliers$Average.Lineage.Size==0,]$Average.Lineage.Size <- NaN
csv_multipliers[csv_multipliers$Lineages==0,]$Lineages <- NaN
names(csv_multipliers)[names(csv_multipliers)=="Datetime"] <- "Dataset"
names(csv_multipliers)[names(csv_multipliers)=="Sample.Entropy"] <- "Sample Entropy"
names(csv_multipliers)[names(csv_multipliers)=="Multiplier.Species"] <- "No. of Species"
names(csv_multipliers)[names(csv_multipliers)=="Average.Lineage.Size"] <- "Average Lineage Size"
levels(csv_multipliers$S_Product) <- c("LeastEnergy", "Uniform")

drop <- c('S_Reactant', 'Target', 'Shape', 'Sample Entropy', 'DFA')

library(xtable)
print(xtable(csv_multipliers[csv_multipliers$Environment==0,!names(csv_multipliers) %in% drop], caption='Summary results for numbers of multipliers measured by \\cref{alg:discover-multipliers} in reaction networks generated by LeastEnergy and Uniform $S_{product}$ strategies, under stable environments (no external selective pressure).', label='tbl:toyworld2-multiplier-results'), booktabs=TRUE, rotate.colnames=TRUE, include.rownames=FALSE, size="scriptsize", caption.placement="top")
@


\section{Conclusions}

\chapter{From Multiplication to Variability}\label{ch:variability}

A \emph{stable} environment is one where the relative fitness of a phenotype with respect to the environment is independent of time. This is similar to statistical stationarity: the phenotype's fitness is independent of when it is measured.  A \emph{changing} environment is therefore one in which the relative phenotypical fitness is time-dependent. In the model in this chapter the environmental change only occurs between generations, and the phenotype of an entity remains constant over its lifespan. Only environmental changes can result in a fitness change: we do not model fitness changes as a result of processes that operate on a sub-generational timescale such as learning or development.

The conceptual basis for the experiments in this \namecref{ch:variability} is outlined in \cref{fig:conceptual-model-for-environmental-change}. 

\begin{figure}
	\begin{center}
		\resizebox{0.8\textwidth}{!}{
			\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=3cm, font=\sffamily\Large\bfseries, thick,
			main node/.style={circle,fill=blue!20,draw, align=center,text width=4cm,minimum size=15mm}]
			\node[main node] (evo) at (0,10) {Evolutionary model};
			\node[main node] (env) at (0,0) {Environmental model};
			\node[main node] (pop) at (6,10) {Population};
			\node[main node] (ts) at (6,0) {Time series of environmental changes};
			\node[main node] (r1) at (12,10) {Metrics};
			\node[main node] (r2) at (12,0) {Metrics};
			\node[main node] (test) at (12,5) {Hypothesis test};
			\node at (4,14) {Simulation};
			
			\path[every node/.style={font=\sffamily,fill=white,inner sep=1pt}]
			(env) edge [->] (ts)
			(evo) edge [->] (pop)
			(pop) edge [->] (r1)
			(ts) edge [->] node[text width=2.5cm,right,xshift=5pt]{Apply at each generation} (pop)
			(r1) edge [->] (test)
			(r2) edge [->] (test)
			(ts) edge [->] (r2);
			\draw [every node] (3,13) rectangle (9,-3);
			\end{tikzpicture}
		}
		\caption[Conceptual model for experiments incorporating environmental change.]{Conceptual model for experiments incorporating environmental change. As described in \cref{environmental-models}, the \emph{Target} experimental factor affects the Evolutionary model; the \emph{Shape} factor modifies the Environmental model.}
		\label{fig:conceptual-model-for-environmental-change}
	\end{center}
\end{figure}

\section{Previous work}\label{sec:variability-previous-work}

Pertubations were applied to a well-mixed reaction vessel by \textcite{Fontana1994a} with objects taken from $\lambda$-calculus. Organisations (entities, \glspl{hypercycle}) in all cases were observed to be self-maintaining but not self-reproducing (excluding cases that included an explicit replication expression.) The model is without locality or spatial effects; pertubations take the form of adding a small number of copies (10 or 50) of a random object every 30,000 or 50,000 collisions. Purpose of pertubations to assess sensitivity of model to change, rather than as a mechanism to induce change. 

A series of successively enhanced models--Polymer-GARD (P-GARD) \parencite{Shenhav2005}, Environment Exchange Polymer-GARD (EE-GARD) \parencite{Shenhav2007}, and Universe-GARD, proposed in \cite{Markovitch2012}--address extending the range of composomal inheritance. P-GARD lacks a mechanism for environmental variation, although EE-GARD, which builds upon P-GARD, moves towards such a mechanism by allowing the composome split or fission events result in half of the composome molecules being returned to the environment. This return mechanism is the enabler for the claim in \textcite[p1819]{Shenhav2007} that the composomes and environment coevolve. Universe-GARD further extends the importance of variation of environment; the population of the main GARD environment is continually exchanged with that of an enveloping ``universe'' that contains significantly more molecular species. No results have yet been reported however.

Regular pertubations are at the core of the liposome model of \textcite{Fernando:2007pf}, where periodic ``avalanches'' of novel side-reactions result in new and rare reaction products which inject variation into the simulation, either by making new reactions possible, or shifting the balance between competing reactions, or by perhaps altering the reaction rates through changes to catalysis. Avalanches are described as an exploration mechanism, extending the range of the simulation into otherwise unlikely regions, although no experimental assessment of their effectiveness was performed.

\section{Measures}

However, this algorithm for irreducible RAFs cannot be applied as-is to discover irreducible F-generated sets as it does not consider stoichiometry. When applied to RAFs, the algorithm correctly ensures that the RA property is maintained by considering catalytic relationships. In the F-generated case--without catalytic relationships--autocatalysis is carried by stoichiometry, which is not maintained by the algorithm.
\begin{DRAFT}
	But as pointed out by \cite[p.66]{Fuchslin2010}, static analysis can be misleading. 
	Recognized by \cite{Hordijk2011}, but not addressed in later work (still static)
	RAFs/cores may in fact be transient, as reaction rates insufficient to overcome outflux ratios in say flow reactor
	Fuschslin describes two approaches to analysis - static (as above) and dynamic
	
	Trace dynamic approach back to concerns in \cite{Bagley1991}
	Interested in concentrations over time - introduction of time dimension - dynamics
	Although took an ODE approach based on reaction rates, rather than in simulation.
	
	\begin{enumerate}
		\item We have an algorithm to detect irrRAF in reaction network (based on static approach) which equate to the \emph{cores} of \cite{Vasas2012}.
		\item But this algorithm cannot be applied to non-catalytic F-generated sets.
		\item We can develop algorithm for detecting stoichiometrically autocatalytic sets.
		\item But specific results (\eg probabilities, lower-bounds) from previous work \parencite{Hordijk2011} not applicable as assume catalysis, and sometimes the binary polymer model.
	\end{enumerate}
	
\end{DRAFT}


%# now look for cycle that is upstream of two or more other cycles
%# "two or more other cycles":
%#   linkages = find all molecules in two (or more) cycles
%#   find all cycles with two (or more) linkage molecules
%# "upstream":
%#   linkage molecule appears as product, not reactant in upstream cycle
%# That is, all cycles with two or more linkage molecules, as products, to different cycles



\section{Sources of selection pressure}\label{environmental-models}

In previous work, \textcite{Jablonka1995} and \textcite{Paenke:2007ie} share a simple model for environmental change, with instantaneous switches between two defined environments according to some schedule. \Textcite{Gaucherel2012} also describes a single model for environmental change--a period of ``smooth'' change (either according to a form of $sine$ curve or unchanging) followed by an abrupt change, repeated--with variation in the length and degree of each period. By contrast, \textcite[79]{Schuster2011}, when describing the relationship between fitness landscapes and error thresholds, details five distinct models of change: ``(i) the single-peak landscape corresponding to a mean field approximation, (ii) the hyperbolic landscape, (iii) the step-linear landscape, (iv) the multiplicative landscape, and (v) the additive or linear landscape.''

A model for changing environments must describe two particular components of change: the \emph{target} of the change, and the \emph{shape} of the change, as outlined in \cref{fig:conceptual-model-for-environmental-change}. 

The \emph{target} of change refers to the aspect of the evolutionary model that is affected by the change. Any model parameter might be a target, as might be combinations of parameters. For example, in the evolutionary model in \cref{ch:variability}, any or all of the parameters $S_\mathrm{Reactant}$, $S_\mathrm{Product}$, $E_\mathrm{Vessel}$ and $E_\mathrm{Bonds}$ could be targets of environmental change.

The \emph{shape} of change describes the way change varies over time, and is given by $\delta$ at timestep $t$, where $\delta_t\in R$; the space of all potential changes at any timestep is effectively limitless. 

\section{Variability without external selection pressure}

\section{Bistate selection pressure}

\section{Predictable and unpredictable pressures}

\subsection{Hypothesis and predictions}

\begin{hypothesis}
	That the number of stable cycle states increases in proportion to the degree of environmental variability, up to some point.
\end{hypothesis}

We define a \emph{stable cycle state} as a chain of two or more cycles linked by a product in one cycle that is also a reactant in the following cycle, and where the cycles have the same "form" (or sequence of molecule species.)

Environmental variability is approximated by sample entropy, a metric of predictability.

Taking a random sample from this space at each step is unlikely to result in enough resolution to test any relevant hypothesis. At the other extreme, taking only a small number of predetermined changes is likely to lead to a sampling fallacy where the choices bias the conclusions.

Instead, we need a way to parameterise the set of interesting environmental changes so we can sample from a constrained but not predetermined parameter space. The range covered by the parameter space should include both predictable and unpredictable changes as the difference between the two is core to our hypothesis.


\subsection{Experiment design}

\subsection{Results}

<<toyworld2-vmultiplier-results, fig.pos='ht', results='asis', echo=FALSE, cache=TRUE, warning=FALSE>>=
drop <- c('S_Reactant')

library(xtable)
print(xtable(csv_multipliers[,!names(csv_multipliers) %in% drop], caption='Summary results for numbers of multipliers measured by \\cref{alg:discover-multipliers} in reaction networks generated by LeastEnergy and Uniform $S_{product}$ strategies under various forms of environmental change.', label='tbl:toyworld2-vmultiplier-results'), booktabs=TRUE, include.rownames=FALSE, rotate.colnames=TRUE, tabular.environment="longtable", floating=FALSE, size="scriptsize", caption.placement="top", add.to.row = list(pos = list(0), command = "\\hline \\endhead "), hline.after=c(-1))
@


\subsection{Discussion}



\section{Conclusions}




